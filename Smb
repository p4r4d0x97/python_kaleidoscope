from scapy.all import sniff, TCP, IP
import socket

# Function to check if the packet is an SMB packet (TCP port 445)
def is_smb(packet, camera_ip):
    # Ensure that the packet is using port 445 (SMB) and coming from the camera IP
    return packet.haslayer(TCP) and (packet.dport == 445 or packet.sport == 445) and packet[IP].src == camera_ip

# Function to process captured packets
def process_packet(packet, camera_ip):
    if is_smb(packet, camera_ip):
        print(f"Captured SMB packet: {packet.summary()}")  # Print packet summary

        # You can filter for specific details within the packet here
        if packet.haslayer(TCP) and b"NTLM" in bytes(packet):
            print(f"NTLM Authentication packet detected: {packet.show()}")

# Function to start sniffing packets on a specified network interface
def start_sniffing(camera_ip, interface='eth0'):
    print(f"Sniffing SMB traffic from camera {camera_ip} on interface {interface}...")
    sniff(prn=lambda pkt: process_packet(pkt, camera_ip), filter="tcp port 445", store=0, iface=interface)

# Main function to take user input and start sniffing
def main():
    # Ask for the camera IP and shared location IP
    camera_ip = input("Enter the Camera IP address: ")
    share_ip = input("Enter the SMB share IP address (e.g., 192.168.1.100): ")

    # Convert input IPs to valid IP format
    try:
        camera_ip = socket.inet_aton(camera_ip)
        share_ip = socket.inet_aton(share_ip)
    except socket.error:
        print("Invalid IP address format.")
        return

    # Ask for the interface (optional, default 'eth0' is commonly used for Ethernet)
    interface = input("Enter the network interface (or press Enter to use 'eth0'): ") or 'eth0'

    # Start sniffing on the given interface
    start_sniffing(camera_ip, interface)

if __name__ == '__main__':
    main()
