<!DOCTYPE html>
<html>
<head>
    <title>Network Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/socket.io@4.5.0/dist/socket.io.min.js"></script>
    <style>
        .notification-container {
            position: fixed;
            bottom: 10px;
            left: 10px;
            width: 300px;
        }
        .notification {
            background-color: #f8f9fa;
            padding: 10px;
            margin-bottom: 5px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
        .online { background-color: #d4edda; }
        .offline { background-color: #f8d7da; }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1>Network Dashboard</h1>
        <form id="filterForm" class="mb-3">
            <div class="row">
                <div class="col-md-3">
                    <input type="text" name="ip" class="form-control" placeholder="IP Filter" value="{{ ip_filter }}">
                </div>
                <div class="col-md-2">
                    <select name="vlan" class="form-control">
                        <option value="">All VLANs</option>
                        {% for vlan in vlans %}
                            <option value="{{ vlan.id }}" {% if vlan_filter == vlan.id|string %}selected{% endif %}>VLAN {{ vlan.id }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-2">
                    <select name="status" class="form-control">
                        <option value="">All Statuses</option>
                        <option value="Online" {% if status_filter == 'Online' %}selected{% endif %}>Online</option>
                        <option value="Offline" {% if status_filter == 'Offline' %}selected{% endif %}>Offline</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <input type="number" name="refresh" id="refreshInput" class="form-control" placeholder="Refresh (s)" value="{{ refresh_rate }}" min="5">
                </div>
                <div class="col-md-2">
                    <select name="per_page" id="perPageSelect" class="form-control">
                        <option value="10" {% if per_page == 10 %}selected{% endif %}>10 per page</option>
                        <option value="25" {% if per_page == 25 %}selected{% endif %}>25 per page</option>
                        <option value="50" {% if per_page == 50 %}selected{% endif %}>50 per page</option>
                        <option value="100" {% if per_page == 100 %}selected{% endif %}>100 per page</option>
                    </select>
                </div>
                <div class="col-md-1">
                    <button type="submit" class="btn btn-primary">Apply</button>
                </div>
            </div>
        </form>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>IP Address</th>
                    <th>VLAN</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="deviceTable">
                {% for device in devices %}
                <tr>
                    <td><a href="{{ url_for('history', ip=device.ip) }}" target="_blank">{{ device.ip }}</a></td>
                    <td>{{ device.vlan }}</td>
                    <td>{{ device.status_text }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>

        <nav class="d-flex justify-content-between align-items-center">
            <div>
                Showing page {{ page }} of {{ pages }}
            </div>
            <div class="input-group w-25">
                <input type="number" id="jumpToPage" class="form-control" placeholder="Go to page" min="1" max="{{ pages }}">
                <button class="btn btn-outline-secondary" type="button" onclick="jumpToPage()">Go</button>
            </div>
            <ul class="pagination mb-0">
                {% if page > 1 %}
                    <li class="page-item">
                        <a class="page-link" href="{{ url_for('index', page=page-1, ip=ip_filter, vlan=vlan_filter, status=status_filter, per_page=per_page, refresh=refresh_rate) }}">Previous</a>
                    </li>
                {% endif %}
                {% for p in range(max(1, page-2), min(pages + 1, page+3)) %}
                    <li class="page-item {% if p == page %}active{% endif %}">
                        <a class="page-link" href="{{ url_for('index', page=p, ip=ip_filter, vlan=vlan_filter, status=status_filter, per_page=per_page, refresh=refresh_rate) }}">{{ p }}</a>
                    </li>
                {% endfor %}
                {% if page < pages %}
                    <li class="page-item">
                        <a class="page-link" href="{{ url_for('index', page=page+1, ip=ip_filter, vlan=vlan_filter, status=status_filter, per_page=per_page, refresh=refresh_rate) }}">Next</a>
                    </li>
                {% endif %}
            </ul>
        </nav>

        <div class="notification-container">
            {% for notification in notifications %}
                <div class="notification {% if notification.status == 'Online' %}online{% else %}offline{% endif %}">
                    {{ notification.ip }} is {{ notification.status }} at {{ notification.time }}
                </div>
            {% endfor %}
        </div>
    </div>

    <script>
        const socket = io();
        socket.on('update', function(data) {
            const tbody = document.getElementById('deviceTable');
            tbody.innerHTML = '';
            Object.keys(data).forEach(ip => {
                const device = data[ip];
                const row = document.createElement('tr');
                const now = Date.now() / 1000;
                let statusText = '';
                if (device.status === 'Online') {
                    const uptime = now - device.first_seen;
                    statusText = `Online for ${Math.floor(uptime / 60)}m ${Math.floor(uptime % 60)}s`;
                } else if (device.status === 'Offline' && device.last_seen) {
                    const downtime = now - device.last_seen;
                    statusText = `Last seen ${Math.floor(downtime / 60)}m ago`;
                } else {
                    statusText = 'Offline';
                }
                row.innerHTML = `
                    <td><a href="/history/${ip}" target="_blank">${ip}</a></td>
                    <td>${device.vlan}</td>
                    <td>${statusText}</td>
                `;
                const statusFilter = "{{ status_filter }}";
                const vlanFilter = "{{ vlan_filter }}";
                const ipFilter = "{{ ip_filter }}";
                if ((!statusFilter || statusFilter === device.status) &&
                    (!vlanFilter || vlanFilter == device.vlan) &&
                    (!ipFilter || ip.includes(ipFilter))) {
                    tbody.appendChild(row);
                }
            });
        });

        socket.on('notification', function(data) {
            const container = document.querySelector('.notification-container');
            const div = document.createElement('div');
            div.className = `notification ${data.status.toLowerCase()}`;
            div.textContent = `${data.ip} is ${data.status} at ${data.time}`;
            container.insertBefore(div, container.firstChild);
            if (container.children.length > 5) {
                container.removeChild(container.lastChild);
            }
        });

        function jumpToPage() {
            const pageInput = document.getElementById('jumpToPage');
            const page = parseInt(pageInput.value);
            if (page >= 1 && page <= {{ pages }}) {
                const url = new URL(window.location);
                url.searchParams.set('page', page);
                window.location = url.toString();
            }
        }

        // Refresh page based on user input
        const refreshInput = document.getElementById('refreshInput');
        const perPageSelect = document.getElementById('perPageSelect');
        let refreshRate = {{ refresh_rate }} * 1000;

        function startRefresh() {
            clearTimeout(window.refreshTimeout);
            refreshRate = parseInt(refreshInput.value) * 1000 || 30000;
            window.refreshTimeout = setTimeout(() => {
                const url = new URL(window.location);
                url.searchParams.set('refresh', refreshInput.value);
                url.searchParams.set('per_page', perPageSelect.value);
                window.location = url.toString();
            }, refreshRate);
        }

        refreshInput.addEventListener('change', startRefresh);
        perPageSelect.addEventListener('change', startRefresh);
        startRefresh();
    </script>
</body>
</html>
