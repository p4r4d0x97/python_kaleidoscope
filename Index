<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>IP Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.0/socket.io.js"></script>
  <script>
    const socket = io();
    let notifications = [];
    let sortColumn = 'ip';
    let sortDirection = 'asc';
    let isRefreshing = false;

    socket.on('status_change', data => {
      const vlanF = '{{ vlan_filter }}';
      const ipF = '{{ ip_filter }}';
      const statusF = '{{ status_filter }}';
      if ((!vlanF || data.vlan.toString() === vlanF)
          && (!ipF || data.ip.includes(ipF))
          && (!statusF || data.status === statusF)) {
        addNotification(`IP ${data.ip} changed to ${data.status} at ${new Date(data.timestamp).toLocaleString()}`);
      }
    });

    socket.on('ping_status', data => {
      const pingIndicator = document.getElementById('ping-indicator');
      if (data.status === 'started') {
        const vlans = data.vlans || [];
        let text = '';
        if (vlans.length === 1) {
          text = `Now pinging VLAN ${vlans[0]}`;
        } else if (vlans.length === 2) {
          text = `Now pinging VLAN ${vlans[0]} and VLAN ${vlans[1]}`;
        } else if (vlans.length > 2) {
          const firsts = vlans.slice(0, vlans.length - 1).join(', ');
          const last = vlans[vlans.length - 1];
          text = `Now pinging VLANs ${firsts} and ${last}`;
        }
        pingIndicator.innerText = text;
        pingIndicator.classList.add('animate-pulse', 'text-blue-600');
      } else if (data.status === 'completed') {
        pingIndicator.innerText = '';
        pingIndicator.classList.remove('animate-pulse', 'text-blue-600');
      }
    });

    function addNotification(msg) {
      notifications.push(msg);
      if (notifications.length > 5) notifications.shift();
      const container = document.getElementById('notification-container');
      container.innerHTML = '';
      notifications.forEach((m, i) => {
        const div = document.createElement('div');
        div.className = 'bg-gray-800 text-white p-4 mb-2 rounded shadow-lg opacity-0 transition-opacity duration-500';
        div.innerText = m;
        container.appendChild(div);
        setTimeout(() => div.classList.add('opacity-100'), 10);
        setTimeout(() => {
          div.classList.remove('opacity-100');
          setTimeout(() => div.remove(), 500);
        }, 5000);
      });
    }

    function getFilterParams() {
      const vlan = document.getElementById('vlanFilter').value;
      const ip = document.getElementById('ipFilter').value;
      const status = document.getElementById('statusFilter').value;
      let p = '';
      if (vlan) p += `&vlan=${vlan}`;
      if (ip) p += `&ip=${ip}`;
      if (status) p += `&status=${status}`;
      return p;
    }

    function setRefresh() {
      const interval = document.getElementById('refreshInterval').value;
      window.location.href = `/?refresh=${interval}${getFilterParams()}&page={{ page }}`;
    }

    function clearFilters() {
      window.location.href = `/?refresh={{ refresh_interval }}&page=1`;
    }

    function sortTable(col) {
      if (sortColumn === col) sortDirection = (sortDirection === 'asc' ? 'desc' : 'asc');
      else { sortColumn = col; sortDirection = 'asc'; }
      window.location.href = `/?refresh={{ refresh_interval }}&page={{ page }}${getFilterParams()}&sort=${col}&dir=${sortDirection}`;
    }

    function exportCSV() {
      window.location.href = '/export?sort=' + sortColumn + '&dir=' + sortDirection + getFilterParams();
    }

    function refreshNow() {
      if (isRefreshing) return;
      isRefreshing = true;
      const btn = document.getElementById('refresh-now-button');
      btn.disabled = true;
      btn.classList.remove('bg-yellow-500');
      btn.classList.add('bg-gray-400');
      btn.innerText = 'Refreshing...';
      socket.emit('manual_refresh', {
        vlan: document.getElementById('vlanFilter').value,
        ip: document.getElementById('ipFilter').value,
        status: document.getElementById('statusFilter').value
      });
    }
  </script>
</head>
<body class="bg-gray-100" onload="setTimeout(() => location.reload(), {{ refresh_interval }} * 1000)">
  <div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4">IP Dashboard ({{ total_ips }} IPs)</h1>

    <div class="bg-white p-4 rounded shadow mb-4">
      <div class="flex flex-wrap gap-4 items-end">
        <div class="flex flex-col">
          <label for="vlanFilter" class="text-sm font-medium text-gray-700">VLAN Filter</label>
          <select id="vlanFilter" onchange="window.location.href='/?refresh={{ refresh_interval }}&page={{ page }}'+getFilterParams()"
                  class="mt-1 block w-full rounded-md border-gray-300 px-2 py-1 text-base">
            <option value="">All</option>
            {% for v in vlans %}
              <option value="{{ v }}" {% if vlan_filter == v|string %}selected{% endif %}>VLAN {{ v }}</option>
            {% endfor %}
          </select>
        </div>

        <div class="flex flex-col">
          <label for="ipFilter" class="text-sm font-medium text-gray-700">IP Filter</label>
          <input type="text" id="ipFilter" value="{{ ip_filter }}" oninput="window.location.href='/?refresh={{ refresh_interval }}&page={{ page }}'+getFilterParams()"
                 class="mt-1 block w-full rounded-md border-gray-300 px-2 py-1 text-base">
        </div>

        <div class="flex flex-col">
          <label for="statusFilter" class="text-sm font-medium text-gray-700">Status Filter</label>
          <select id="statusFilter" onchange="window.location.href='/?refresh={{ refresh_interval }}&page={{ page }}'+getFilterParams()"
                  class="mt-1 block w-full rounded-md border-gray-300 px-2 py-1 text-base">
            <option value="">All</option>
            <option value="online" {% if status_filter=='online' %}selected{% endif %}>Online</option>
            <option value="offline" {% if status_filter=='offline' %}selected{% endif %}>Offline</option>
            <option value="no_data" {% if status_filter=='no_data' %}selected{% endif %}>No Data</option>
          </select>
        </div>

        <div class="flex flex-col">
          <label for="refreshInterval" class="text-sm font-medium text-gray-700">Refresh Interval (seconds)</label>
          <input type="number" id="refreshInterval" value="{{ refresh_interval }}" min="10"
                 class="mt-1 block w-full rounded-md border-gray-300 px-2 py-1 text-base">
          <button onclick="setRefresh()" class="mt-2 bg-blue-500 text-white px-4 py-2 rounded text-base">Set</button>
        </div>

        <button onclick="clearFilters()" class="bg-gray-500 text-white px-4 py-2 rounded text-base">Clear Filters</button>
        <button onclick="exportCSV()" class="bg-green-500 text-white px-4 py-2 rounded text-base">Export CSV</button>
        <button id="refresh-now-button" onclick="refreshNow()"
                class="bg-yellow-500 text-white px-4 py-2 rounded text-base">Refresh Now</button>
        <a href="/visualize" class="bg-purple-500 text-white px-4 py-2 rounded text-base hover:bg-purple-600">Network Visualization</a>
        <span id="ping-indicator" class="text-sm font-medium text-gray-700"></span>
      </div>
    </div>

    <div class="bg-white p-4 rounded shadow mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
      <div class="p-4 bg-blue-100 rounded text-base font-medium">Online Devices: {{ summary.online }}</div>
      <div class="p-4 bg-red-100 rounded text-base font-medium">Offline Devices: {{ summary.offline }}</div>
      <div class="p-4 bg-gray-100 rounded text-base font-medium">Last Checked: {{ summary.last_checked }}</div>
    </div>

    <div class="overflow-x-auto">
      <table class="min-w-full bg-white border border-gray-200 text-base">
        <thead>
          <tr>
            <th onclick="sortTable('ip')" class="px-6 py-3 border-b text-left font-medium text-gray-500 uppercase tracking-wider cursor-pointer">IP Address</th>
            <th onclick="sortTable('vlan')" class="px-6 py-3 border-b text-left font-medium text-gray-500 uppercase tracking-wider cursor-pointer">VLAN</th>
            <th onclick="sortTable('status')" class="px-6 py-3 border-b text-left font-medium text-gray-500 uppercase tracking-wider cursor-pointer">Status</th>
            <th onclick="sortTable('uptime')" class="px-6 py-3 border-b text-left font-medium text-gray-500 uppercase tracking-wider cursor-pointer">Uptime / Last Seen</th>
            <th onclick="sortTable('last_status_change')" class="px-6 py-3 border-b text-left font-medium text-gray-500 uppercase tracking-wider cursor-pointer">Last Status Change</th>
          </tr>
        </thead>
        <tbody>
          {% for ip in ips %}
            <tr>
              <td class="px-6 py-4 border-b"><a href="/history/{{ ip.ip }}" target="_blank" class="text-blue-600 hover:underline">{{ ip.ip }}</a></td>
              <td class="px-6 py-4 border-b">{{ ip.vlan }}</td>
              <td class="px-6 py-4 border-b">
                <span class="px-2 inline-flex text-xs font-semibold rounded-full {% if ip.status=='online' %}bg-green-100 text-green-800{% elif ip.status=='offline' %}bg-red-100 text-red-800{% else %}bg-gray-100 text-gray-800{% endif %}">
                  {{ ip.status|capitalize }}
                </span>
              </td>
              <td class="px-6 py-4 border-b">
                {% if ip.status == 'online' %}
                  Uptime: {{ ip.uptime }}
                {% elif ip.status == 'offline' and ip.last_seen != 'N/A' %}
                  Last Seen: {{ ip.last_seen }}
                {% else %}
                  No Data
                {% endif %}
              </td>
              <td class="px-6 py-4 border-b">{{ ip.last_status_change if ip.last_status_change!='N/A' else 'No Data' }}</td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>

    <div class="mt-4 flex justify-between items-center">
      <div>
        {% if page > 1 %}
          <a href="/?page={{ page-1 }}&refresh={{ refresh_interval }}{% if vlan_filter %}&vlan={{ vlan_filter }}{% endif %}{% if ip_filter %}&ip={{ ip_filter }}{% endif %}{% if status_filter %}&status={{ status_filter }}{% endif %}"
             class="bg-blue-500 text-white px-4 py-2 rounded text-base hover:bg-blue-600">Previous</a>
        {% endif %}
      </div>
      <div class="text-base text-gray-700">Page {{ page }} of {{ total_pages }}</div>
      <div>
        {% if page < total_pages %}
          <a href="/?page={{ page+1 }}&refresh={{ refresh_interval }}{% if vlan_filter %}&vlan={{ vlan_filter }}{% endif %}{% if ip_filter %}&ip={{ ip_filter }}{% endif %}{% if status_filter %}&status={{ status_filter }}{% endif %}"
             class="bg-blue-500 text-white px-4 py-2 rounded text-base hover:bg-blue-600">Next</a>
        {% endif %}
      </div>
    </div>

    <div id="notification-container" class="fixed bottom-4 right-4 w-80"></div>
  </div>
</body>
</html>
