import asyncio
import sqlite3
import ipaddress
import time
from datetime import datetime, timedelta
from flask import Flask, render_template, jsonify, request, redirect, url_for
import aioping
import threading
import csv
from io import StringIO
from collections import defaultdict
import json

app = Flask(__name__)

# VLAN configuration
VLANS = [
    {"id": 10, "network": "192.168.1.1/21"},
    {"id": 20, "network": "192.168.3.1/24"},
    # Add more VLANs here as needed
]

# In-memory store for chart data (last 10 minutes)
CHART_DATA = defaultdict(list)  # {vlan_id: [(timestamp, online_count), ...]}
CHART_RETENTION = 600  # 10 minutes in seconds

# Database initialization
def init_db():
    conn = sqlite3.connect('devices.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS device_status
                 (ip TEXT PRIMARY KEY, status TEXT, last_seen REAL, online_since REAL, name TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS session_history
                 (ip TEXT, start_time REAL, end_time REAL, duration REAL)''')
    conn.commit()
    conn.close()

# Helper to get all IPs in a network
def get_ips_in_network(network):
    return [str(ip) for ip in ipaddress.IPv4Network(network, strict=False)]

# Async ping function
async def ping_ip(ip):
    try:
        await asyncio.wait_for(aioping.ping(ip, timeout=1), timeout=1)
        return True
    except:
        return False

# Update device status and chart data
async def update_vlan_status(vlan):
    conn = sqlite3.connect('devices.db')
    c = conn.cursor()
    ips = get_ips_in_network(vlan["network"])
    tasks = [ping_ip(ip) for ip in ips]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    current_time = time.time()
    online_count = sum(1 for result in results if result is True)
    
    # Update chart data
    CHART_DATA[vlan["id"]].append((current_time, online_count))
    # Prune old data (older than 10 minutes)
    CHART_DATA[vlan["id"]] = [(t, c) for t, c in CHART_DATA[vlan["id"]] if current_time - t <= CHART_RETENTION]
    
    for ip, result in zip(ips, results):
        c.execute("SELECT status, online_since, name FROM device_status WHERE ip=?", (ip,))
        row = c.fetchone()
        new_status = "online" if result is True else "offline"
        
        if row:
            old_status, online_since, name = row
            if new_status != old_status:
                c.execute("UPDATE device_status SET status=?, last_seen=?, online_since=? WHERE ip=?",
                         (new_status, current_time if new_status == "offline" else None,
                          current_time if new_status == "online" else online_since, ip))
                if new_status == "online":
                    app.config['NOTIFICATIONS'].append(f"Device {name or ip} went online")
                else:
                    duration = current_time - online_since if online_since else 0
                    c.execute("INSERT INTO session_history (ip, start_time, end_time, duration) VALUES (?, ?, ?, ?)",
                             (ip, online_since, current_time, duration))
                    app.config['NOTIFICATIONS'].append(f"Device {name or ip} went offline")
        else:
            c.execute("INSERT INTO device_status (ip, status, last_seen, online_since, name) VALUES (?, ?, ?, ?, ?)",
                     (ip, new_status, current_time if new_status == "offline" else None,
                      current_time if new_status == "online" else None, None))
            app.config['NOTIFICATIONS'].append(f"Device {ip} went {new_status}")
    
    conn.commit()
    conn.close()

# Background task to ping VLANs
def background_task():
    async def ping_vlans():
        while True:
            for i in range(0, len(VLANS), 2):
                vlan_group = VLANS[i:i+2]
                for vlan in vlan_group:
                    await update_vlan_status(vlan)
                await asyncio.sleep(10)  # Wait 10 seconds between VLAN groups
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(ping_vlans())

# Flask routes
@app.route('/')
def index():
    conn = sqlite3.connect('devices.db')
    c = conn.cursor()
    c.execute("SELECT ip, status, last_seen, online_since, name FROM device_status")
    devices = c.fetchall()
    conn.close()
    
    current_time = time.time()
    formatted_devices = []
    for ip, status, last_seen, online_since, name in devices:
        if status == "online" and online_since:
            duration = timedelta(seconds=int(current_time - online_since))
        else:
            duration = None
        last_seen_time = datetime.fromtimestamp(last_seen).strftime('%Y-%m-%d %H:%M:%S') if last_seen else None
        formatted_devices.append((ip, status, last_seen_time, duration, name))
    
    # Prepare chart data
    chart_labels = []
    chart_datasets = []
    if CHART_DATA:
        earliest_time = min(min(t for t, _ in data) for data in CHART_DATA.values())
        chart_labels = [(datetime.fromtimestamp(t).strftime('%H:%M:%S')) for t, _ in sorted(CHART_DATA[VLANS[0]["id"]])]
        for vlan in VLANS:
            counts = [c for _, c in sorted(CHART_DATA[vlan["id"]])]
            chart_datasets.append({
                "label": f"VLAN {vlan['id']}",
                "data": counts,
                "borderColor": f"rgb({(vlan['id'] * 50) % 255}, {(vlan['id'] * 100) % 255}, {(vlan['id'] * 150) % 255})",
                "fill": False
            })
    
    return render_template('index.html', devices=formatted_devices, notifications=app.config['NOTIFICATIONS'][-5:],
                         chart_labels=json.dumps(chart_labels), chart_datasets=json.dumps(chart_datasets))

@app.route('/history/<ip>')
def history(ip):
    conn = sqlite3.connect('devices.db')
    c = conn.cursor()
    c.execute("SELECT start_time, end_time, duration FROM session_history WHERE ip=? ORDER BY start_time DESC", (ip,))
    history = c.fetchall()
    c.execute("SELECT name FROM device_status WHERE ip=?", (ip,))
    name = c.fetchone()[0] if c.fetchone() else None
    conn.close()
    
    formatted_history = []
    for start, end, duration in history:
        start_time = datetime.fromtimestamp(start).strftime('%Y-%m-%d %H:%M:%S')
        end_time = datetime.fromtimestamp(end).strftime('%Y-%m-%d %H:%M:%S') if end else "Still online"
        duration_str = str(timedelta(seconds=int(duration))) if duration else "N/A"
        formatted_history.append((start_time, end_time, duration_str))
    
    return render_template('history.html', ip=ip, name=name, history=formatted_history)

@app.route('/set_name', methods=['POST'])
def set_name():
    ip = request.form['ip']
    name = request.form['name'].strip()
    conn = sqlite3.connect('devices.db')
    c = conn.cursor()
    c.execute("UPDATE device_status SET name=? WHERE ip=?", (name if name else None, ip))
    conn.commit()
    conn.close()
    return jsonify({'status': 'success'})

@app.route('/get_notifications')
def get_notifications():
    return jsonify(app.config['NOTIFICATIONS'][-5:])

@app.route('/export_csv')
def export_csv():
    conn = sqlite3.connect('devices.db')
    c = conn.cursor()
    c.execute("SELECT ip, status, last_seen, online_since, name FROM device_status")
    devices = c.fetchall()
    conn.close()
    
    current_time = time.time()
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(['IP', 'Status', 'Last Seen', 'Online Since', 'Name'])
    
    for ip, status, last_seen, online_since, name in devices:
        last_seen_str = datetime.fromtimestamp(last_seen).strftime('%Y-%m-%d %H:%M:%S') if last_seen else ''
        online_since_str = datetime.fromtimestamp(online_since).strftime('%Y-%m-%d %H:%M:%S') if online_since else ''
        writer.writerow([ip, status, last_seen_str, online_since_str, name or ''])
    
    output.seek(0)
    return output.getvalue(), 200, {
        'Content-Type': 'text/csv',
        'Content-Disposition': 'attachment; filename=devices.csv'
    }

if __name__ == '__main__':
    app.config['NOTIFICATIONS'] = []
    init_db()
    threading.Thread(target=background_task, daemon=True).start()
    app.run(debug=True)
