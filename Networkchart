from flask import Flask, render_template, request, Response
import json
from flask_socketio import SocketIO, emit
import sqlite3
import ipaddress
import asyncio
import time
from datetime import datetime, timedelta
import platform
import subprocess
import threading
import csv
import io

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode='threading')

# VLAN definitions
vlans = [
    {'id': 10, 'network': '192.168.1.0/24'},
    {'id': 20, 'network': '192.168.2.0/24'},
    {'id': 30, 'network': '192.168.3.0/24'}
]

# Database initialization
def init_db():
    with sqlite3.connect('ip_status.db') as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS ip_status
                     (ip TEXT PRIMARY KEY, vlan INTEGER, status TEXT, last_seen TEXT, uptime_start TEXT, last_status_change TEXT)''')
        c.execute('''CREATE TABLE IF NOT EXISTS session_history
                     (id INTEGER PRIMARY KEY AUTOINCREMENT, ip TEXT, start_time TEXT, end_time TEXT)''')
        conn.commit()

def get_all_ips(sort_column='ip', sort_direction='asc'):
    ips = []
    with sqlite3.connect('ip_status.db') as conn:
        c = conn.cursor()
        for vlan in vlans:
            net = ipaddress.ip_network(vlan['network'])
            for ip in net.hosts():
                ip_str = str(ip)
                c.execute('SELECT * FROM ip_status WHERE ip=?', (ip_str,))
                result = c.fetchone()
                if not result:
                    c.execute('INSERT OR IGNORE INTO ip_status (ip, vlan, status, last_seen, uptime_start, last_status_change) VALUES (?, ?, ?, ?, ?, ?)',
                              (ip_str, vlan['id'], 'no_data', 'N/A', 'N/A', 'N/A'))
                else:
                    c.execute('UPDATE ip_status SET vlan=? WHERE ip=?', (vlan['id'], ip_str))
                c.execute('SELECT * FROM ip_status WHERE ip=?', (ip_str,))
                result = c.fetchone()
                ips.append({
                    'ip': ip_str,
                    'vlan': result[1],
                    'status': result[2],
                    'last_seen': result[3],
                    'uptime_start': result[4],
                    'last_status_change': result[5]
                })
        conn.commit()

    # Sorting
    if sort_column == 'ip':
        ips.sort(key=lambda x: ipaddress.ip_address(x['ip']), reverse=(sort_direction == 'desc'))
    elif sort_column == 'vlan':
        ips.sort(key=lambda x: x['vlan'], reverse=(sort_direction == 'desc'))
    elif sort_column == 'status':
        ips.sort(key=lambda x: x['status'], reverse=(sort_direction == 'desc'))
    elif sort_column == 'uptime':
        ips.sort(key=lambda x: x['last_seen'] if x['last_seen'] != 'N/A' else '0', reverse=(sort_direction == 'desc'))
    elif sort_column == 'last_status_change':
        ips.sort(key=lambda x: x['last_status_change'] if x['last_status_change'] != 'N/A' else '0', reverse=(sort_direction == 'desc'))

    return ips

async def ping_ip(ip):
    param = '-n' if platform.system().lower() == 'windows' else '-c'
    cmd = ['ping', param, '1', '-w', '2', ip]
    try:
        proc = await asyncio.create_subprocess_exec(*cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = await proc.communicate()
        return proc.returncode == 0
    except Exception as ex:
        print(f"Ping error {ip}: {ex}")
        return False

async def ping_vlan(vlan_ips, conn, cursor):
    vlan_ids = sorted(set(ip['vlan'] for ip in vlan_ips))
    if vlan_ids:
        socketio.emit('ping_status', {'vlans': vlan_ids, 'status': 'started'})
    tasks = [ping_ip(ip['ip']) for ip in vlan_ips]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    now_iso = datetime.now().isoformat()

    for ip, result in zip(vlan_ips, results):
        now = datetime.now().isoformat()
        cursor.execute('SELECT status, uptime_start FROM ip_status WHERE ip=?', (ip['ip'],))
        current = cursor.fetchone()
        new_status = 'online' if result is True else 'offline'
        if not current:
            cursor.execute('INSERT INTO ip_status (ip, vlan, status, last_seen, uptime_start, last_status_change) VALUES (?, ?, ?, ?, ?, ?)',
                           (ip['ip'], ip['vlan'], new_status, now, now if result else 'N/A', now))
        elif current[0] != new_status:
            if result:
                cursor.execute('UPDATE ip_status SET status=?, uptime_start=?, last_seen=?, last_status_change=? WHERE ip=?',
                               (new_status, now, now, now, ip['ip']))
                cursor.execute('INSERT INTO session_history (ip, start_time) VALUES (?, ?)', (ip['ip'], now))
            else:
                cursor.execute('UPDATE ip_status SET status=?, last_seen=?, last_status_change=? WHERE ip=?',
                               (new_status, now, now, ip['ip']))
                if current[0] == 'online':
                    cursor.execute('UPDATE session_history SET end_time=? WHERE ip=? AND end_time IS NULL',
                                   (now, ip['ip']))
            socketio.emit('status_change', {
                'ip': ip['ip'], 'vlan': ip['vlan'], 'status': new_status, 'timestamp': now
            })
        elif current[0] == 'online':
            cursor.execute('UPDATE ip_status SET last_seen=? WHERE ip=?', (now, ip['ip']))

    conn.commit()
    if vlan_ids:
        socketio.emit('ping_status', {'vlans': vlan_ids, 'status': 'completed'})
    return now_iso

async def ping_all_ips(ips, conn, cursor):
    tasks = [ping_ip(ip['ip']) for ip in ips]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    now_iso = datetime.now().isoformat()

    for ip, result in zip(ips, results):
        now = datetime.now().isoformat()
        cursor.execute('SELECT status, uptime_start FROM ip_status WHERE ip=?', (ip['ip'],))
        current = cursor.fetchone()
        new_status = 'online' if result is True else 'offline'
        if not current:
            cursor.execute('INSERT INTO ip_status (ip, vlan, status, last_seen, uptime_start, last_status_change) VALUES (?, ?, ?, ?, ?, ?)',
                           (ip['ip'], ip['vlan'], new_status, now, now if result else 'N/A', now))
        elif current[0] != new_status:
            if result:
                cursor.execute('UPDATE ip_status SET status=?, uptime_start=?, last_seen=?, last_status_change=? WHERE ip=?',
                               (new_status, now, now, now, ip['ip']))
                cursor.execute('INSERT INTO session_history (ip, start_time) VALUES (?, ?)', (ip['ip'], now))
            else:
                cursor.execute('UPDATE ip_status SET status=?, last_seen=?, last_status_change=? WHERE ip=?',
                               (new_status, now, now, ip['ip']))
                if current[0] == 'online':
                    cursor.execute('UPDATE session_history SET end_time=? WHERE ip=? AND end_time IS NULL',
                                   (now, ip['ip']))
            socketio.emit('status_change', {
                'ip': ip['ip'], 'vlan': ip['vlan'], 'status': new_status, 'timestamp': now
            })
        elif current[0] == 'online':
            cursor.execute('UPDATE ip_status SET last_seen=? WHERE ip=?', (now, ip['ip']))

    conn.commit()
    socketio.emit('manual_refresh_complete', {'message': 'Manual refresh completed'})
    return now_iso

def run_ping_loop():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    while True:
        with sqlite3.connect('ip_status.db') as conn:
            c = conn.cursor()
            for i in range(0, len(vlans), 2):
                group = vlans[i:i+2]
                vlan_ips = []
                for v in group:
                    net = ipaddress.ip_network(v['network'])
                    vlan_ips += [{'ip': str(ip), 'vlan': v['id']} for ip in net.hosts()]
                loop.run_until_complete(ping_vlan(vlan_ips, conn, c))
                time.sleep(5)
    loop.close()

@app.route('/')
def index():
    refresh = request.args.get('refresh', '30')
    vlan_filter = request.args.get('vlan', '')
    ip_filter = request.args.get('ip', '')
    status_filter = request.args.get('status', '')
    page = int(request.args.get('page', 1))
    sort = request.args.get('sort', 'ip')
    direction = request.args.get('dir', 'asc')
    per_page = 10

    ips = get_all_ips(sort, direction)
    filtered = []
    for ip in ips:
        if ((not vlan_filter or str(ip['vlan']) == vlan_filter) and
            (not ip_filter or ip_filter in ip['ip']) and
            (not status_filter or ip['status'] == status_filter)):
            if ip['status'] == 'online' and ip['uptime_start'] != 'N/A':
                uptime_start = datetime.fromisoformat(ip['uptime_start'])
                ip['uptime'] = str(datetime.now() - uptime_start)
            else:
                ip['uptime'] = 'N/A'
            filtered.append(ip)

    summary = {
        'online': sum(1 for ip in filtered if ip['status'] == 'online'),
        'offline': sum(1 for ip in filtered if ip['status'] == 'offline'),
        'last_checked': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    total = len(filtered)
    pages = (total + per_page - 1) // per_page
    start = (page - 1) * per_page
    end = start + per_page
    page_ips = filtered[start:end]

    return render_template('index.html',
                           ips=page_ips, vlans=[v['id'] for v in vlans],
                           refresh_interval=refresh, page=page, total_pages=pages,
                           total_ips=total, vlan_filter=vlan_filter,
                           ip_filter=ip_filter, status_filter=status_filter,
                           summary=summary)

@app.route('/export')
def export():
    vlan_filter = request.args.get('vlan', '')
    ip_filter = request.args.get('ip', '')
    status_filter = request.args.get('status', '')
    sort = request.args.get('sort', 'ip')
    direction = request.args.get('dir', 'asc')

    ips = get_all_ips(sort, direction)
    filtered = [ip for ip in ips if
                (not vlan_filter or str(ip['vlan']) == vlan_filter) and
                (not ip_filter or ip_filter in ip['ip']) and
                (not status_filter or ip['status'] == status_filter)]

    output = io.StringIO()
    w = csv.writer(output)
    w.writerow(['IP Address', 'VLAN', 'Status', 'Last Seen', 'Uptime Start', 'Last Status Change'])
    for ip in filtered:
        w.writerow([ip['ip'], ip['vlan'], ip['status'], ip['last_seen'], ip['uptime_start'], ip['last_status_change']])
    return Response(output.getvalue(), mimetype='text/csv',
                    headers={'Content-Disposition': 'attachment; filename=ip_status.csv'})

@app.route('/history/<ip>')
def history(ip):
    with sqlite3.connect('ip_status.db') as conn:
        c = conn.cursor()
        c.execute('SELECT start_time, end_time FROM session_history WHERE ip=? ORDER BY start_time DESC', (ip,))
        raw = c.fetchall()
    history = []
    for start, end in raw:
        start_dt = datetime.fromisoformat(start)
        end_dt = datetime.fromisoformat(end) if end else None
        duration = (end_dt - start_dt) if end_dt else None
        history.append({
            'start': start_dt.strftime('%Y-%m-%d %H:%M:%S'),
            'end': end_dt.strftime('%Y-%m-%d %H:%M:%S') if end_dt else 'Ongoing',
            'duration': str(duration) if duration else 'Ongoing'
        })
    return render_template('history.html', ip=ip, history=history)

@app.route('/visualize')
def visualize():
    vlan_filter = request.args.get('vlan', '')
    ip_filter = request.args.get('ip', '')
    status_filter = request.args.get('status', '')
    sort = request.args.get('sort', 'ip')
    direction = request.args.get('dir', 'asc')

    ips = get_all_ips(sort, direction)
    filtered_ips = [ip for ip in ips if
                    (not vlan_filter or str(ip['vlan']) == vlan_filter) and
                    (not ip_filter or ip_filter in ip['ip']) and
                    (not status_filter or ip['status'] == status_filter)]

    vlan_nodes = [{'id': f'vlan_{vlan["id"]}', 'type': 'vlan', 'vlan': vlan['id']} for vlan in vlans]
    ip_nodes = [{
        'id': ip['ip'],
        'type': 'ip',
        'vlan': ip['vlan'],
        'status': ip['status']
    } for ip in filtered_ips]
    nodes = vlan_nodes + ip_nodes
    links = [{'source': f'vlan_{ip["vlan"]}', 'target': ip['ip']} for ip in filtered_ips]

    return render_template('visualize.html',
                           nodes=json.dumps(nodes),
                           links=json.dumps(links),
                           vlans=vlans)

@socketio.on('connect')
def handle_connect():
    emit('connected', {'message': 'Connected to notifications'})

@socketio.on('manual_refresh')
def handle_manual_refresh(data):
    ips = get_all_ips()
    filt = []
    for ip in ips:
        if ((not data.get('vlan') or str(ip['vlan']) == data.get('vlan')) and
            (not data.get('ip') or data.get('ip') in ip['ip']) and
            (not data.get('status') or ip['status'] == data.get('status'))):
            filt.append(ip)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    with sqlite3.connect('ip_status.db') as conn:
        c = conn.cursor()
        loop.run_until_complete(ping_all_ips(filt, conn, c))
    loop.close()

if __name__ == '__main__':
    init_db()
    threading.Thread(target=run_ping_loop, daemon=True).start()
    socketio.run(app, debug=True)
